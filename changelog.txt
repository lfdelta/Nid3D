
### MM/DD/YYYY ###
Name 1 & Name 2 & ...

1. Enumerated list of edits made
2. Place most recent logs above older ones



### 1/24/2018 ###
Luca Frez-Albrecht
1. GameController tracks the rightOfWay, which is either null or a PlayerID
2. GameController now stores an array of CharControllers in order to test for right-of-way
3. optimizations to CharController's GetOtherPlayers() function; also altered its behavior to collect all other players without any restriction on the number, because of the potential for undesired/undefined behavior under "unusual" conditions, ie more players in the scene than the number indexed by the function
4. made PlayerControlState its own class, previously classes.ControlState, for clarity
5. CharController sends a message to GameController upon death, at which point the latter evaluates right-of-way



### 1/21/2018 ###
Luca Frez-Albrecht
1. fixed a player animation issue by changing the "Run_001" setting to loop playback



### 1/12/2018 ###
Luca Frez-Albrecht
1. created Sword object (not yet a prefab) with attached Sword script
2. implemented basic system for changing player state to Dead when colliding with another player's sword
3. players return from the Dead state after a public float respawnTime, set by default to 1 second



### 1/7/2018 ###
Ashley Li w/ Luca Frez-Albrecht, Benjamin Killeen
1. GetOtherPlayers function stores an array of all other player GameObjects
2. PointCharacter function rotates the player in a given direction
3. LookAtLastVelocity and LookAtNearestPlayer functions differentially orient the player based on context



### 12/27/2017 ###
Luca Frez-Albrecht
1. minor optimizations to CharController.cs by comparing vectors' square magnitudes rather than their magnitudes
2. edited Input Manager values so that keyboard axes respond more quickly
3. implemented new player physics as designed on paper, with a new set of parameters for the friction and drag forces: now everything works the same on the ground and in the air without any extra tweaking, and we
4. "No Friction" physic material to ensure that CharController.cs is the only thing influencing player movement
5. replaced references to velocity (in relation to running speed, etc.) with references to velocity in the XZ plane
6. modified Fencer capsule collider and CharController origin-to-feet value to match new player mesh
7. commented out DirectionChange code, as this is now deprecated, pending review by the team



### 12/23/2017 ###
Luca Frez-Albrecht
1. implemented a basic linear friction function
2. began overhauling player movement based on classical mechanics model--still needs a lot of work



### 12/7/2017 ###
1. merging the menu and new player models into master



### 11/23/2017 ###
Luca Frez-Albrecht
1. copied and edited the Team Utility Example1 RebindInput script to interact with the built in UIButton interface
2. CharInput ignores button presses while the game is paused



### 11/21/2017 ###
Luca Frez-Albrecht
1. inserted a Team Utility Standalone Input Module to the EventSystem--buttons have mouse interaction now!
2. created a shell of a Settings menu, including a volume slider (interfacing with the GameController)
3. Controls menu now has one functioning key-binding button!



### 11/17/2017 ###
Molly O'Donnell, Luca Frez-Albrecht
1. imported new model, rig, and running animation for player
2. replaced player prefab using new rig
3. began implemented player control, but states currently switch rapidly between frames resulting in twitchy back-and-forth transition between animations



### 11/14/2017 ###
Luca Frez-Albrecht
1. fleshed out the Canvas in Main scene with a PausePanel and corresponding buttons
2. created a GameController to keep track of the pause state



### 11/11/2017 ###
Benjamin Killeen, Ashley Li, Luca Frez-Albrecht
1. inserted new Input Manager into Main scene
2. added a second Player prefab into Main



### 11/7/2017 ###
Luca Frez-Albrecht
1. created new Axes Testing scene and AxisTesting script to visualize input axes and button presses
2. mapped P1Keyboard, P2Keyboard, and logitech f310 buttons to P1/2Gamepad setups



### 11/6/2017 ###
Luca Frez-Albrecht
1. condensed the Start<state> functions into one ChangeState(newState)
2. capped the movement vector in CharInput to length 1, rather than normalizing input vectors even when they're less than unit length. this reduced jittery stopping while the digital input axes returned to zero, and paves the way for analog input
3. added DirectionChange checking inside of DoJump to remove continuous midair movement; we make a final decision to keep/remove this check later on
4. created a ControlState constructor to address null object references



### 10/31/2017 ###
Benjamin Killeen
1. added several Start<state> functions, which have frequently used transition
   code
2. started work on the Jump state. Added rudimentary functionality to it
3. Moved the transition to jump from fixed update to the Do<state> functions
   


### 10/31/2017 ###
Luca Frez-Albrecht
1. imported input manager assets, including example scenes. we will need some sort of menu to implement button remapping
2. replaced UnityEngine.Input calls with TeamUtility.IO.InputManager
3. player controls similarly to previous, but we need to re-tweak the gravity and sensitivity on the input axes (inside the Input Manager object)



### 10/27/2017 ###
Benjamin Killeen & Luca Frez-Albrecht
1. direction change function: determines if input vector changed direction
2. trimmed FSM to remove independent degrees of freedom
3. implemented basic fence/run finite state handlers



### 10/26/2017 ###
Luca Frez-Albrecht
1. impose maximum player speed only in the XZ plane; leave Y velocity untouched
2. allow the player to move freely in midair
3. added high-friction Physic Material to the plane object; this will require some tweaking



### 10/24/2017 ###
Benjamin Killeen (noted afterward by LFâˆ†)
1. ControlState class which we can pass as an argument to the character controller without needing to change its parameters as we add new functionality
2. imposed a maximum player velocity using wrapper function CharController.MoveXZ
3. handle different player speeds using a Gait enum: static, walk, run


### 10/19/2017 ###
Luca Frez-Albrecht
1. Q and E adjust player/sword height discretely and clamp to allowed range
2. physics-based movement adapted from sample Unity third-person character controller scripts: WASD to move in horizontal plane, space to jump



### 10/17/17 ###
Luca Frez-Albrecht
1. set up github repo
2. fencer model; rigged but not animated
3. Player prefab; no functioning controls yet
