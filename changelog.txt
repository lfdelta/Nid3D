
### MM/DD/YYYY ###
Name 1 & Name 2 & ...

1. Enumerated list of edits made
2. Place most recent logs above older ones



### 11/11/2017 ###
Benjamin Killeen, Ashley Li, Luca Frez-Albrecht
1. inserted new Input Manager into Main scene
2. added a second Player prefab into Main



### 11/7/2017 ###
Luca Frez-Albrecht
1. created new Axes Testing scene and AxisTesting script to visualize input axes and button presses
2. mapped P1Keyboard, P2Keyboard, and logitech f310 buttons to P1/2Gamepad setups



### 11/6/2017 ###
Luca Frez-Albrecht
1. condensed the Start<state> functions into one ChangeState(newState)
2. capped the movement vector in CharInput to length 1, rather than normalizing input vectors even when they're less than unit length. this reduced jittery stopping while the digital input axes returned to zero, and paves the way for analog input
3. added DirectionChange checking inside of DoJump to remove continuous midair movement; we make a final decision to keep/remove this check later on
4. created a ControlState constructor to address null object references



### 10/31/2017 ###
Benjamin Killeen
1. added several Start<state> functions, which have frequently used transition
   code
2. started work on the Jump state. Added rudimentary functionality to it
3. Moved the transition to jump from fixed update to the Do<state> functions
   


### 10/31/2017 ###
Luca Frez-Albrecht
1. imported input manager assets, including example scenes. we will need some sort of menu to implement button remapping
2. replaced UnityEngine.Input calls with TeamUtility.IO.InputManager
3. player controls similarly to previous, but we need to re-tweak the gravity and sensitivity on the input axes (inside the Input Manager object)



### 10/27/2017 ###
Benjamin Killeen & Luca Frez-Albrecht
1. direction change function: determines if input vector changed direction
2. trimmed FSM to remove independent degrees of freedom
3. implemented basic fence/run finite state handlers



### 10/26/2017 ###
Luca Frez-Albrecht
1. impose maximum player speed only in the XZ plane; leave Y velocity untouched
2. allow the player to move freely in midair
3. added high-friction Physic Material to the plane object; this will require some tweaking



### 10/24/2017 ###
Benjamin Killeen (noted afterward by LFâˆ†)
1. ControlState class which we can pass as an argument to the character controller without needing to change its parameters as we add new functionality
2. imposed a maximum player velocity using wrapper function CharController.MoveXZ
3. handle different player speeds using a Gait enum: static, walk, run


### 10/19/2017 ###
Luca Frez-Albrecht
1. Q and E adjust player/sword height discretely and clamp to allowed range
2. physics-based movement adapted from sample Unity third-person character controller scripts: WASD to move in horizontal plane, space to jump



### 10/17/17 ###
Luca Frez-Albrecht
1. set up github repo
2. fencer model; rigged but not animated
3. Player prefab; no functioning controls yet
