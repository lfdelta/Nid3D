
### MM/DD/YYYY ###
Name 1 & Name 2 & ...

1. Enumerated list of edits made
2. Place most recent logs above older ones



### 5/5/2018 ###
Luca Frez-Albrecht
1. created Main Menu scene, with level select, settings, and a quit button
2. upon player victory, the Main Menu is loaded



### 5/2/2018 ###
Luca Frez-Albrecht
1. implemented (and tested) the ability to choose a gamepad number at runtime, allowing both players to use different gamepads simultaneously



### 4/22/2018 ###
Luca Frez-Albrecht
1. created Disarm() function in CharController to be called from SwordDisarm, as an alternative to the (less general) method of setting the sword velocity inside of DropSword()
2. implemented ThrowSword() in CharController, in conjunction to a new OnCollisionEnter function in the Sword script which deactivates the sword once it collides with the environment
3. shifted some of the sword-state setting into a public void Throw() in the Sword script
4. thrown swords ignore gravity while in the air
5. players who tryToThrowSword while in the FSM.Jump state will face their opponent



### 4/20/2018 ###
Luca Frez-Albrecht
1. the Unity built-in horizontal/vertical layout groups don't play nice when nested, so the menu is ugly as heck, but now all controls are remappable for both players at runtime, and they can switch between keyboard and gamepad controls at will from the controls menu
2. "default" button implemented to load default input configuration; without modifying TeamUtility's InputManager class, there is no way to restore one player's defaults without doing so for the other as well
3. created and manipulated an "active" boolean in CheckForSwords, rather than using MonoBehaviour.enabled, so that characters can no longer pick up swords while they're dead (but the script will still accurately track swords in its collider, hopefully)
4. if DropSword is called while a player is in FSM.Stab, they will transition to FSM.Fence to prevent them from being trapped in the Stab state, waiting for their sword animation to finish



### 4/19/2018 ###
Luca Frez-Albrecht
1. created ToggleInputType script and a UIToggle object, allowing the player (currently just P1) to switch at runtime between the keyboard and gamepad configurations, and also hides/exposes the appropriate rebind menu buttons



### 4/14/2018 ###
Luca Frez-Albrecht
1. GameController script now has a public AsyncLoadSceneByName function, presumably to be called from the menu--maybe this could be ported to a separate script for organizational purposes (note: this only works consistently in the built executable, where the relevant scenes are all present in memory)
2. Behind The Scenes is now a prefab, so that it can be automatically updated in all game levels at once
3. modified input configurations (inside the Controls menu) are now saved before opening a new scene and loaded upon entering the new scene, and are even persistent after closing and reopening the app!
4. WorldNodeScript disables its MeshRenderer component if not in editor mode
5. SceneController script created to handle scene transitions and to save/load input configurations; inputs are loaded at the start of each level and are saved when i) the controls menu is closed and ii) if the game is unpaused
6. default configuration is written only the first time the game is run, and stores the InputManager's editor values for player input configurations



### 4/13/2018 ###
Luca Frez-Albrecht
1. fixed the bug where players could disarm each other while starting at the same sword height by adding another check condition



### 4/8/2018 ###
Luca Frez-Albrecht
1. player transitions to/from FSM.Run based upon the magnitude of their input, rather than on the player object's current velocity
2. fixed a bug where CharInput would not detect when a player stopped holding the input above the "running" threshold
3. players have a greater maximum velocity while running than while in other states; players who are not holding swords have their running velocity further increased
4. CharController's sword isMoving bool is now only true if the distance between current position and target position is less than swordHeightIncrement, in addition to the original condition, which seems to fully prevent players from disarming one another when their swords both begin at the same height



### 4/6/2018 ###
Luca Frez-Albrecht
1. removed Height.Throw from enum, replacing its behavior using the bool tryToThrowSword
2. implemented the sword-throwing position, and inserted the ThrowSword() function into the FSM states where the player is allowed to do that
3. set the sword to not be Active unless the player is fencing (and not trying to throw the sword) or the player is actively stabbing; in all other states their swords should not cause damage to other players
4. moved the Sword.Activate code related to rigidbody constraints and player ineractions to Sword.ChangeOwnership so that we can deactivate the sword without allowing it to be affected by gravity, etc
5. copied and modified CheckGrounded script into CheckForSwords, so that players can detect nearby swords which may be picked up
6. ugh, added ANOTHER physics layer; this one is used for Player>SwordChecker object and only collides with swords
7. new object, script, and code allowing players to pick up dropped swords



### 4/4/2018 ###
Luca Frez-Albrecht
1. finished CharInput code to track sword-height buttons being held down
2. bools in CharController based on player holding height buttons: tryToCrouch and tryToThrowSword



### 4/3/2018 ###
Luca Frez-Albrecht
1. commented out Sword debug code
2. ported PlayerControlState class definition into CharInput script, which is the only place where its values are assigned
3. moved GetAxis commands for player inputs from FixedUpdate into Update
4. wrote (not yet tested) code to check whether player's movement input exceeded a threshold for a given duration of time, which can be used to tell the CharController to enter the FSM.Run state; similar restructuring currently in progress for changing sword height



### 3/24/2018 ###
Luca Frez-Albrecht
1. gave CharController's DropSword() a boolean parameter, which will later be used to determine the sword's motion based upon whether the player was killed or disarmed
2. Sword script has (likely temporary) debug functionality which changes the renderer material while the sword is in its "can disarm other swords" state
3. Sword prefab contains two new child objects, each one containing a SwordDisarm script which disarms any player if it collides with their sword while in the active "can disarm" state
4. ported PlayerID OtherPlayer(PlayerID) from Sword to the Tools script
5. created a swordHeightIncrement variable inside CharController, to define the value in only one location rather than hard-coding it throughout the script
6. when a player is disarmed, their sword is flung behind them while rotating; values can be tweaked in side of CharController.DropSword()



### 3/21/2018 ###
Luca Frez-Albrecht
1. restructured Sword prefab's hierarchy, thereby fixing the problem of the parent/child colliders and rigidbodies (all on different collision layers) separating upon deactivation
2. KillPlayer script modified to allow the option to kill all players or only a particular one
3. sword-player hitbox is now a KillPlayer script, separate from (but childed to) the main Sword script
4. fixed a minor bug where players who were standing inside of an EndZone before it was activated would not win until they left and re-entered the trigger
5. new WorldBoundary script which not only kills players but also destroys other game objects which leave its trigger
6. two new physics layers, WorldBounds and (for the swords) CollideGround_DestroyOnExit, in order to jump through hoops with respect to checking player ground-collision
7. simplified KillPlayer script, removing the functionality which was ported to WorldBoundary


### 3/19/2018 ###
Luca Frez-Albrecht
1. Sword objects no longer receive shadows
2. added a capsule trigger collider to the players' feet in order to check collisions with the ground even on slopes, using the new GroundColliders layer and CheckGrounded script
3. automatically initialize CharInput component rather than redundantly assigning its player number in the editor
4. further increased gravity (and jump force, to maintain jump height)
5. players are only affected by gravity when they are not grounded, so they no longer slide while standing on sloped surfaces
6. Sword objects disable their trigger collider and SwordBox colliders when dropped, and re-enable them when picked up
7. players now DropSword upon death and create a new sword when respawning, but there are bugs associated with the Sword hierarchy and the relative transforms



### 3/10/2018 ###
Luca Frez-Albrecht
1. Shadow prefab and CastShadow script to see player shadows (soon to be an ellipse texture) projected onto the ground beneath them. circumvents the directional lighting/shadow system because players' shadows would be drowned out when standing below planes which also cast shadows onto the floor
2. shadow texture (and material) implemented and added to the prefab
3. disabled constructed shadows because I discovered how to prevent certain objects from casting shadows. however, the shadows drawn by the engine are still not ideal, because the player models are so narrow



### 3/7/2018 ###
Luca Frez-Albrecht
1. implemented an algorithm, based upon tracking each segment's normal vector, to ensure all WorldNodeScript bisectors are pointing in the same half-space defined by the line segments (ie inside of a spiral or outside), to prevent over-rotation of the RightOfWayWalls when interpolating between nodes
2. sword height (the Height enum) is reset upon player respawning
3. players can adjust their sword height while in any player state; we could alternately create a function to selective adjust the height only in certain states, but it should be allowed in more than just the FSM.Fence state
4. EndZones are now deactivated unless their associated player has the right of way, and offer visual feedback by swapping to a neutral material while inactive



### 3/5/2018 ###
Luca Frez-Albrecht
1. Spiral scene to test 3D maps
2. slight modifications to WorldNodeScript and NodeTraversal to allow for node traversal in three dimensions, as opposed to only in the XZ plane



### 2/26/2018 ###
Luca Frez-Albrecht
1. EndZone prefab, which sends a message to the GameController when the corresponding players enters its trigger
2. when a player enters their end zone, GameController waits a few seconds while displaying the victory message, then reloads the current scene
3. new physics/collider layers for Players and PlayerInteractibles, ie so that the WorldBoundary doesn't check collisions with every single object in the scene for each frame, only for the players
4. if both players are dead, their respawn positions are centered between the ROW walls, rather than centered at their previous average position, preventing one from spawning inside the walls while the other spawns outside
5. end zones (in Linear scene) resized, and colored to match their player
6. sword position changes continuously (but rapidly) when a player adjusts their height
7. fixed a small bug where the victor could exit/enter the trigger to keep the message showing indefinitely
8. NodeDebug no longer compiled for builds (it crashes the build if it tries)
9. increased right-of-way wall size so that players can't just jump around them



### 2/25/2018 ###
Luca Frez-Albrecht
1. rewrote NodeTraversal functions and scripts inheriting it to only track the leftmost node (startNode -> leftNode; endNode removed)
2. using the above, rewrote CheckNodeTransition so that it could be implemented in the NodeTraversal class rather than copied and pasted in each place a small variation was needed
3. implemented the "place" part of ROWWalls' PlaceSelfAndRotate inside of NodeTraversal
4. GameController now does all tracking of player position/corresponding node and calls update functions inside of the camera and wall scripts. the code structure is getting a lot cleaner overall
5. players now coordinate with the GameController to choose an appropriate respawn location--almost trivial after constructing and refactoring the node system
6. WorldBoundary prefab: when a player exits this box, they will die; use this as a safeguard in addition to (or a convenience in place of) kill planes
7. when one player has right of way and the other player touches the remaining ROW wall, the player without right of way dies--so that they can respawn in front of the ROW player
8. created a KillPlane prefab with a slight modification of the WorldBoundary script (now called KillPlayer)



### 2/24/2018 ###
Luca Frez-Albrecht
1. RightOfWayWalls traverse the segments properly now, and follow the players' projection onto the WorldNode segments, though they still misbehave past the endpoints
2. more debug options for WorldNodes, including the ability to edit multiple nodes' debug settings at once by selecting them all in the inspector at runtime
3. new scene, Linear, implementing a zigzagging map
4. created a NodeTraversal class which is inherited by CameraController and RightOfWayWall, to host common functions
5. walls rotate to align themselves with equi-t lines
6. walls now behave when /they/ are beyond the endpoints, as long as the average /player/ position doesn't venture beyond the world nodes
7. walls remain stationary when nobody has the right of way, and the appropriate wall is disabled when a player does have the right of way
8. moved Fencer prefab's mesh renderer into a prefab component rather than a child object
9. players disappear from view while they are dead



### 2/23/2018 ###
Luca Frez-Albrecht
1. NodeDrawBisector script to assist visualization and debugging
2. first WorldNode is now set in the GameController, which passes it along the CameraController on initialization
3. RightOfWayWalls are technically in place, but their positioning algorithm is seriously busted, probably due to a misnavigation of the segments


### 2/20/2018 ###
Luca Frez-Albrecht
1. new initialization code for WorldNodeScript to calculate the "segment" unit vectors connecting each node, as well as to compute the angle-bisector of the segments connecting each node to its predecessor and follower
2. implemented relatively efficient (mostly float multiplication) parametrization of any world-space position onto the XZ-projected world nodes' connecting line segments inside of CameraController WorldToLine(), using the angle-bisectors
3. smooth camera translation and rotation controlled by public parameters
4. WorldNodeScript shows only nextNode in inspector; prevNode is automatically initialized. if appropriate, this can be easily reversed (manual initialization) by removing the [HideInInspector] tag and the "nextNode.prevNode = this" segment in Awake()
5. deleted CameraNode prefab and script, now that its functionality has been (mostly) rewritten elsewhere. again, we can use git history to reacquire these files if appropriate



### 2/19/2018 ###
Luca Frez-Albrecht
1. establishing code in WorldNodeScript
2. placed more of the player-tracking workload (average position) inside of the GameController instead of the CameraController, so that the information can be calculated once and used by various objects in every frame
3. removed the unused code in CameraNodeScript
4. UpdateTilt() function in CameraController allows the update to occur only when the right-of-way changes rather than with every update



### 2/17/2018 ###
Luca Frez-Albrecht w/ Molly O'Donnell, Ashley Li
1. replaced Fencer.blend with Molly's new version, including an en garde animation in place of the default T pose
2. copied (and modified) Ashley's new camera controller system, which is built upon a doubly-linked list of camera nodes, each of which is associated with one world node, where all nodes are GameObjects placed in the editor (or, theoretically, generated in code)
3. modified CamerController code to find average player position to handle zero targets without freaking out
4. reset sword position on respawn, to prevent swords sticking out if the player was mid-stab when killed



### 2/14/2018 ###
Luca Frez-Albrecht
1. AsymmetricLinearStab() for different rising and falling times
2. players may only stab while standing on the ground
3. using TriggerColliders in the SwordBox objects to more carefully control how players' swords push off one another
4. replaced frustum collider for SwordBox with a CubeCollider because the frustum benefits (convenient repulsion physics) are no longer relevant
5. added another check into DoFence() to make sure players can't be forced into FSM.Run unless they have movement input in the same direction, regardless of their velocity
6. increased gravity and CharController jump force; this may need further tweaking down the line
7. increased physics solver iterations from 6 to 10



### 2/11/2018 ###
Luca Frez-Albrecht
1. created a rectangular frustum model and a SwordCollider object layer in order to prevent players holding swords from impaling one another simply by walking
2. CharController now creates a sword for each player at runtime, using the new AttachSword method
3. players changing the sword height status now affects the actual position of their attached sword
4. added FSM.Stab state to handle player attacks
5. created DoStab() and StabAnimation() to parametrize sword stabbing as a function of time
6. StabAnimation() currently implemented as a linear increase and decrease in position
7. fixed a bug in MoveXZ() behavior by using the inputted "Vector3 move" instead of bypassing the arguments with direct access of controlState.moveInXZ



### 2/9/2018 ###
Luca Frez-Albrecht
1. created a Pyramid model to visualize camera path-control nodes



### 1/27/2018 ###
Luca Frez-Albrecht
1. CameraController script to track players and change angle based upon right of way
2. Sword is now a prefab, and one is currently permanently attached to each player
3. PlayerDied(PlayerID) -> PlayerIsAlive({PlayerID, bool}), so players communicate with GameController both upon death and upon revival, in order for more robust camera tracking
4. PlayerAlive class and constructor, defined in CharController, in order to pass info to PlayerIsAlive function in GameController
5. CameraController tracks average position of all living players, and tilts toward either "endzone" depending on who currently has the right of way



### 1/24/2018 ###
Luca Frez-Albrecht
1. GameController tracks the rightOfWay, which is either null or a PlayerID
2. GameController now stores an array of CharControllers in order to test for right-of-way
3. optimizations to CharController's GetOtherPlayers() function; also altered its behavior to collect all other players without any restriction on the number, because of the potential for undesired/undefined behavior under "unusual" conditions, ie more players in the scene than the number indexed by the function
4. made PlayerControlState its own class, previously classes.ControlState, for clarity
5. CharController sends a message to GameController upon death, at which point the latter evaluates right-of-way



### 1/21/2018 ###
Luca Frez-Albrecht
1. fixed a player animation issue by changing the "Run_001" setting to loop playback



### 1/12/2018 ###
Luca Frez-Albrecht
1. created Sword object (not yet a prefab) with attached Sword script
2. implemented basic system for changing player state to Dead when colliding with another player's sword
3. players return from the Dead state after a public float respawnTime, set by default to 1 second



### 1/7/2018 ###
Ashley Li w/ Luca Frez-Albrecht, Benjamin Killeen
1. GetOtherPlayers function stores an array of all other player GameObjects
2. PointCharacter function rotates the player in a given direction
3. LookAtLastVelocity and LookAtNearestPlayer functions differentially orient the player based on context



### 12/27/2017 ###
Luca Frez-Albrecht
1. minor optimizations to CharController.cs by comparing vectors' square magnitudes rather than their magnitudes
2. edited Input Manager values so that keyboard axes respond more quickly
3. implemented new player physics as designed on paper, with a new set of parameters for the friction and drag forces: now everything works the same on the ground and in the air without any extra tweaking, and we
4. "No Friction" physic material to ensure that CharController.cs is the only thing influencing player movement
5. replaced references to velocity (in relation to running speed, etc.) with references to velocity in the XZ plane
6. modified Fencer capsule collider and CharController origin-to-feet value to match new player mesh
7. commented out DirectionChange code, as this is now deprecated, pending review by the team



### 12/23/2017 ###
Luca Frez-Albrecht
1. implemented a basic linear friction function
2. began overhauling player movement based on classical mechanics model--still needs a lot of work



### 12/7/2017 ###
1. merging the menu and new player models into master



### 11/23/2017 ###
Luca Frez-Albrecht
1. copied and edited the Team Utility Example1 RebindInput script to interact with the built in UIButton interface
2. CharInput ignores button presses while the game is paused



### 11/21/2017 ###
Luca Frez-Albrecht
1. inserted a Team Utility Standalone Input Module to the EventSystem--buttons have mouse interaction now!
2. created a shell of a Settings menu, including a volume slider (interfacing with the GameController)
3. Controls menu now has one functioning key-binding button!



### 11/17/2017 ###
Molly O'Donnell, Luca Frez-Albrecht
1. imported new model, rig, and running animation for player
2. replaced player prefab using new rig
3. began implemented player control, but states currently switch rapidly between frames resulting in twitchy back-and-forth transition between animations



### 11/14/2017 ###
Luca Frez-Albrecht
1. fleshed out the Canvas in Main scene with a PausePanel and corresponding buttons
2. created a GameController to keep track of the pause state



### 11/11/2017 ###
Benjamin Killeen, Ashley Li, Luca Frez-Albrecht
1. inserted new Input Manager into Main scene
2. added a second Player prefab into Main



### 11/7/2017 ###
Luca Frez-Albrecht
1. created new Axes Testing scene and AxisTesting script to visualize input axes and button presses
2. mapped P1Keyboard, P2Keyboard, and logitech f310 buttons to P1/2Gamepad setups



### 11/6/2017 ###
Luca Frez-Albrecht
1. condensed the Start<state> functions into one ChangeState(newState)
2. capped the movement vector in CharInput to length 1, rather than normalizing input vectors even when they're less than unit length. this reduced jittery stopping while the digital input axes returned to zero, and paves the way for analog input
3. added DirectionChange checking inside of DoJump to remove continuous midair movement; we make a final decision to keep/remove this check later on
4. created a ControlState constructor to address null object references



### 10/31/2017 ###
Benjamin Killeen
1. added several Start<state> functions, which have frequently used transition
   code
2. started work on the Jump state. Added rudimentary functionality to it
3. Moved the transition to jump from fixed update to the Do<state> functions
   


### 10/31/2017 ###
Luca Frez-Albrecht
1. imported input manager assets, including example scenes. we will need some sort of menu to implement button remapping
2. replaced UnityEngine.Input calls with TeamUtility.IO.InputManager
3. player controls similarly to previous, but we need to re-tweak the gravity and sensitivity on the input axes (inside the Input Manager object)



### 10/27/2017 ###
Benjamin Killeen & Luca Frez-Albrecht
1. direction change function: determines if input vector changed direction
2. trimmed FSM to remove independent degrees of freedom
3. implemented basic fence/run finite state handlers



### 10/26/2017 ###
Luca Frez-Albrecht
1. impose maximum player speed only in the XZ plane; leave Y velocity untouched
2. allow the player to move freely in midair
3. added high-friction Physic Material to the plane object; this will require some tweaking



### 10/24/2017 ###
Benjamin Killeen (noted afterward by LF∆)
1. ControlState class which we can pass as an argument to the character controller without needing to change its parameters as we add new functionality
2. imposed a maximum player velocity using wrapper function CharController.MoveXZ
3. handle different player speeds using a Gait enum: static, walk, run


### 10/19/2017 ###
Luca Frez-Albrecht
1. Q and E adjust player/sword height discretely and clamp to allowed range
2. physics-based movement adapted from sample Unity third-person character controller scripts: WASD to move in horizontal plane, space to jump



### 10/17/17 ###
Luca Frez-Albrecht
1. set up github repo
2. fencer model; rigged but not animated
3. Player prefab; no functioning controls yet
