
### MM/DD/YYYY ###
Name 1 & Name 2 & ...

1. Enumerated list of edits made
2. Place most recent logs above older ones



### 2/20/2018 ###
Luca Frez-Albrecht
1. new initialization code for WorldNodeScript to calculate the "segment" unit vectors connecting each node, as well as to compute the angle-bisector of the segments connecting each node to its predecessor and follower
2. implemented relatively efficient (mostly float multiplication) parametrization of any world-space position onto the XZ-projected world nodes' connecting line segments inside of CameraController WorldToLine(), using the angle-bisectors
3. smooth camera translation and rotation controlled by public parameters
4. WorldNodeScript shows only nextNode in inspector; prevNode is automatically initialized. if appropriate, this can be easily reversed (manual initialization) by removing the [HideInInspector] tag and the "nextNode.prevNode = this" segment in Awake()
5. deleted CameraNode prefab and script, now that its functionality has been (mostly) rewritten elsewhere. again, we can use git history to reacquire these files if appropriate



### 2/19/2018 ###
Luca Frez-Albrecht
1. establishing code in WorldNodeScript
2. placed more of the player-tracking workload (average position) inside of the GameController instead of the CameraController, so that the information can be calculated once and used by various objects in every frame
3. removed the unused code in CameraNodeScript
4. UpdateTilt() function in CameraController allows the update to occur only when the right-of-way changes rather than with every update



### 2/17/2018 ###
Luca Frez-Albrecht w/ Molly O'Donnell, Ashley Li
1. replaced Fencer.blend with Molly's new version, including an en garde animation in place of the default T pose
2. copied (and modified) Ashley's new camera controller system, which is built upon a doubly-linked list of camera nodes, each of which is associated with one world node, where all nodes are GameObjects placed in the editor (or, theoretically, generated in code)
3. modified CamerController code to find average player position to handle zero targets without freaking out
4. reset sword position on respawn, to prevent swords sticking out if the player was mid-stab when killed



### 2/14/2018 ###
Luca Frez-Albrecht
1. AsymmetricLinearStab() for different rising and falling times
2. players may only stab while standing on the ground
3. using TriggerColliders in the SwordBox objects to more carefully control how players' swords push off one another
4. replaced frustum collider for SwordBox with a CubeCollider because the frustum benefits (convenient repulsion physics) are no longer relevant
5. added another check into DoFence() to make sure players can't be forced into FSM.Run unless they have movement input in the same direction, regardless of their velocity
6. increased gravity and CharController jump force; this may need further tweaking down the line
7. increased physics solver iterations from 6 to 10



### 2/11/2018 ###
Luca Frez-Albrecht
1. created a rectangular frustum model and a SwordCollider object layer in order to prevent players holding swords from impaling one another simply by walking
2. CharController now creates a sword for each player at runtime, using the new AttachSword method
3. players changing the sword height status now affects the actual position of their attached sword
4. added FSM.Stab state to handle player attacks
5. created DoStab() and StabAnimation() to parametrize sword stabbing as a function of time
6. StabAnimation() currently implemented as a linear increase and decrease in position
7. fixed a bug in MoveXZ() behavior by using the inputted "Vector3 move" instead of bypassing the arguments with direct access of controlState.moveInXZ



### 2/9/2018 ###
Luca Frez-Albrecht
1. created a Pyramid model to visualize camera path-control nodes



### 1/27/2018 ###
Luca Frez-Albrecht
1. CameraController script to track players and change angle based upon right of way
2. Sword is now a prefab, and one is currently permanently attached to each player
3. PlayerDied(PlayerID) -> PlayerIsAlive({PlayerID, bool}), so players communicate with GameController both upon death and upon revival, in order for more robust camera tracking
4. PlayerAlive class and constructor, defined in CharController, in order to pass info to PlayerIsAlive function in GameController
5. CameraController tracks average position of all living players, and tilts toward either "endzone" depending on who currently has the right of way



### 1/24/2018 ###
Luca Frez-Albrecht
1. GameController tracks the rightOfWay, which is either null or a PlayerID
2. GameController now stores an array of CharControllers in order to test for right-of-way
3. optimizations to CharController's GetOtherPlayers() function; also altered its behavior to collect all other players without any restriction on the number, because of the potential for undesired/undefined behavior under "unusual" conditions, ie more players in the scene than the number indexed by the function
4. made PlayerControlState its own class, previously classes.ControlState, for clarity
5. CharController sends a message to GameController upon death, at which point the latter evaluates right-of-way



### 1/21/2018 ###
Luca Frez-Albrecht
1. fixed a player animation issue by changing the "Run_001" setting to loop playback



### 1/12/2018 ###
Luca Frez-Albrecht
1. created Sword object (not yet a prefab) with attached Sword script
2. implemented basic system for changing player state to Dead when colliding with another player's sword
3. players return from the Dead state after a public float respawnTime, set by default to 1 second



### 1/7/2018 ###
Ashley Li w/ Luca Frez-Albrecht, Benjamin Killeen
1. GetOtherPlayers function stores an array of all other player GameObjects
2. PointCharacter function rotates the player in a given direction
3. LookAtLastVelocity and LookAtNearestPlayer functions differentially orient the player based on context



### 12/27/2017 ###
Luca Frez-Albrecht
1. minor optimizations to CharController.cs by comparing vectors' square magnitudes rather than their magnitudes
2. edited Input Manager values so that keyboard axes respond more quickly
3. implemented new player physics as designed on paper, with a new set of parameters for the friction and drag forces: now everything works the same on the ground and in the air without any extra tweaking, and we
4. "No Friction" physic material to ensure that CharController.cs is the only thing influencing player movement
5. replaced references to velocity (in relation to running speed, etc.) with references to velocity in the XZ plane
6. modified Fencer capsule collider and CharController origin-to-feet value to match new player mesh
7. commented out DirectionChange code, as this is now deprecated, pending review by the team



### 12/23/2017 ###
Luca Frez-Albrecht
1. implemented a basic linear friction function
2. began overhauling player movement based on classical mechanics model--still needs a lot of work



### 12/7/2017 ###
1. merging the menu and new player models into master



### 11/23/2017 ###
Luca Frez-Albrecht
1. copied and edited the Team Utility Example1 RebindInput script to interact with the built in UIButton interface
2. CharInput ignores button presses while the game is paused



### 11/21/2017 ###
Luca Frez-Albrecht
1. inserted a Team Utility Standalone Input Module to the EventSystem--buttons have mouse interaction now!
2. created a shell of a Settings menu, including a volume slider (interfacing with the GameController)
3. Controls menu now has one functioning key-binding button!



### 11/17/2017 ###
Molly O'Donnell, Luca Frez-Albrecht
1. imported new model, rig, and running animation for player
2. replaced player prefab using new rig
3. began implemented player control, but states currently switch rapidly between frames resulting in twitchy back-and-forth transition between animations



### 11/14/2017 ###
Luca Frez-Albrecht
1. fleshed out the Canvas in Main scene with a PausePanel and corresponding buttons
2. created a GameController to keep track of the pause state



### 11/11/2017 ###
Benjamin Killeen, Ashley Li, Luca Frez-Albrecht
1. inserted new Input Manager into Main scene
2. added a second Player prefab into Main



### 11/7/2017 ###
Luca Frez-Albrecht
1. created new Axes Testing scene and AxisTesting script to visualize input axes and button presses
2. mapped P1Keyboard, P2Keyboard, and logitech f310 buttons to P1/2Gamepad setups



### 11/6/2017 ###
Luca Frez-Albrecht
1. condensed the Start<state> functions into one ChangeState(newState)
2. capped the movement vector in CharInput to length 1, rather than normalizing input vectors even when they're less than unit length. this reduced jittery stopping while the digital input axes returned to zero, and paves the way for analog input
3. added DirectionChange checking inside of DoJump to remove continuous midair movement; we make a final decision to keep/remove this check later on
4. created a ControlState constructor to address null object references



### 10/31/2017 ###
Benjamin Killeen
1. added several Start<state> functions, which have frequently used transition
   code
2. started work on the Jump state. Added rudimentary functionality to it
3. Moved the transition to jump from fixed update to the Do<state> functions
   


### 10/31/2017 ###
Luca Frez-Albrecht
1. imported input manager assets, including example scenes. we will need some sort of menu to implement button remapping
2. replaced UnityEngine.Input calls with TeamUtility.IO.InputManager
3. player controls similarly to previous, but we need to re-tweak the gravity and sensitivity on the input axes (inside the Input Manager object)



### 10/27/2017 ###
Benjamin Killeen & Luca Frez-Albrecht
1. direction change function: determines if input vector changed direction
2. trimmed FSM to remove independent degrees of freedom
3. implemented basic fence/run finite state handlers



### 10/26/2017 ###
Luca Frez-Albrecht
1. impose maximum player speed only in the XZ plane; leave Y velocity untouched
2. allow the player to move freely in midair
3. added high-friction Physic Material to the plane object; this will require some tweaking



### 10/24/2017 ###
Benjamin Killeen (noted afterward by LF∆)
1. ControlState class which we can pass as an argument to the character controller without needing to change its parameters as we add new functionality
2. imposed a maximum player velocity using wrapper function CharController.MoveXZ
3. handle different player speeds using a Gait enum: static, walk, run


### 10/19/2017 ###
Luca Frez-Albrecht
1. Q and E adjust player/sword height discretely and clamp to allowed range
2. physics-based movement adapted from sample Unity third-person character controller scripts: WASD to move in horizontal plane, space to jump



### 10/17/17 ###
Luca Frez-Albrecht
1. set up github repo
2. fencer model; rigged but not animated
3. Player prefab; no functioning controls yet
